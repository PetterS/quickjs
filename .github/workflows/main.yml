name: Build, test, release

on:
  push:
    branches:
      - "*"
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+.dev[0-9]+"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
        os: [ubuntu-latest, macos-13, macos-14, macos-15, windows-2022]
        manylinux: [null, "manylinux_2_28_x86_64", "manylinux_2_28_aarch64"]
        exclude:
          # Exclude manylinux for non-Linux platforms
          - os: macos-13
            manylinux: "manylinux_2_28_x86_64"
          - os: macos-13
            manylinux: "manylinux_2_28_aarch64"
          - os: macos-14
            manylinux: "manylinux_2_28_x86_64"
          - os: macos-14
            manylinux: "manylinux_2_28_aarch64"
          - os: macos-15
            manylinux: "manylinux_2_28_x86_64"
          - os: macos-15
            manylinux: "manylinux_2_28_aarch64"
          - os: windows-2022
            manylinux: "manylinux_2_28_x86_64"
          - os: windows-2022
            manylinux: "manylinux_2_28_aarch64"
          # Exclude null manylinux for Linux
          - os: ubuntu-latest
            manylinux: null

    runs-on: ${{ matrix.os }}
    container: ${{ matrix.manylinux != 'manylinux_2_28_aarch64' && matrix.manylinux && format('quay.io/pypa/{0}', matrix.manylinux) || null }}

    steps:
      # Set up QEMU for aarch64 emulation
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: matrix.manylinux == 'manylinux_2_28_aarch64'

      - uses: actions/checkout@v4
        with:
          submodules: true

      # Install libffi-devel for manylinux_2_28 and Python 3.13
      - name: Install system dependencies
        if: matrix.manylinux == 'manylinux_2_28_x86_64' && matrix.python-version == '3.13'
        run: |
          yum install -y libffi-devel
        shell: bash

      # Windows specific setup
      - uses: ./.github/actions/setup-mingw
        if: runner.os == 'Windows'
        with:
          key-base: ${{ matrix.os }}-py${{ matrix.python-version }}

      # Setup Python (not for Linux containers)
      - uses: actions/setup-python@v4
        if: runner.os != 'Linux' || !matrix.manylinux
        with:
          python-version: ${{ matrix.python-version }}

      - uses: ./.github/actions/setup-poetry
        if: matrix.manylinux != 'manylinux_2_28_aarch64'
        with:
          key-base: ${{ matrix.os }}-${{ matrix.manylinux || 'native' }}-py${{ matrix.python-version }}
          use-pipx: ${{ matrix.manylinux && 'true' || 'false' }}
          use-specific-python-version: ${{ matrix.manylinux && 'true' || 'false' }}
          specific-python-version: ${{ matrix.python-version }}

      # Run tests for aarch64 in Docker
      - name: Run tests in aarch64 container
        if: matrix.manylinux == 'manylinux_2_28_aarch64'
        run: |
          docker run --rm -v ${{ github.workspace }}:/work -w /work \
            --platform linux/arm64 \
            quay.io/pypa/manylinux_2_28_aarch64 \
            bash -c "
              # Install Python if needed
              if ! command -v python${{ matrix.python-version }} &> /dev/null; then
                PYTHON_VERSION=\"${{ matrix.python-version }}\"
                yum install -y python\${PYTHON_VERSION//./-} python\${PYTHON_VERSION//./-}-devel
              fi

              # Install pipx and poetry
              python${{ matrix.python-version }} -m pip install pipx
              python${{ matrix.python-version }} -m pipx install poetry
              export PATH=\"\$HOME/.local/bin:\$PATH\"

              # Configure poetry
              poetry config --local virtualenvs.in-project true
              poetry env use python${{ matrix.python-version }}
              poetry install

              # Run tests
              make test
            "

      # Run tests
      - run: make test
        if: matrix.manylinux != 'manylinux_2_28_aarch64'

      # Upload artifacts for tagged builds
      - uses: ./.github/actions/upload-artifacts
        with:
          make-binary: true
          repair-manylinux: ${{ matrix.manylinux && 'true' || 'false' }}
          manylinux-target: ${{ matrix.manylinux }}
        if: github.ref_type == 'tag'

  package-source:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      - uses: ./.github/actions/setup-poetry
        with:
          key-base: source_linux-py3.8
          use-pipx: false
          use-specific-python-version: false
      - uses: ./.github/actions/upload-artifacts
        with:
          make-binary: false

  upload-pypi:
    needs: [build, package-source]
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      - uses: actions/download-artifact@v3
        with:
          path: dist
      - uses: ./.github/actions/setup-poetry
        with:
          key-base: source_linux-py3.8
          use-pipx: false
          use-specific-python-version: false
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: dist/artifact/
        if: ${{ !contains(github.ref_name, 'dev') }}
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TESTPYPI_API_TOKEN }}
          packages_dir: dist/artifact/
          repository_url: https://test.pypi.org/legacy/
        if: ${{ contains(github.ref_name, 'dev') }}
